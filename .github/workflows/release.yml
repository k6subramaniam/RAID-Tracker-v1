name: Release APK

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v4
        
      - name: 📋 Generate changelog
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## What's New in RAIDMASTER ${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### ✨ Features" >> $GITHUB_OUTPUT
          echo "- Complete RAID management system" >> $GITHUB_OUTPUT
          echo "- AI-powered analysis and validation" >> $GITHUB_OUTPUT
          echo "- Interactive risk assessment matrix" >> $GITHUB_OUTPUT
          echo "- Comprehensive reporting and analytics" >> $GITHUB_OUTPUT
          echo "- Dark/Light theme support" >> $GITHUB_OUTPUT
          echo "- Offline-first data persistence" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 🎯 Optimizations" >> $GITHUB_OUTPUT
          echo "- Samsung Galaxy S25 Ultra optimization" >> $GITHUB_OUTPUT
          echo "- Smooth 120Hz display support" >> $GITHUB_OUTPUT
          echo "- S Pen compatibility" >> $GITHUB_OUTPUT
          echo "- Haptic feedback integration" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 📱 Compatibility" >> $GITHUB_OUTPUT
          echo "- Android 6.0+ (API 23+)" >> $GITHUB_OUTPUT
          echo "- Optimized for Samsung Galaxy S25 Ultra" >> $GITHUB_OUTPUT
          echo "- Support for all Android devices" >> $GITHUB_OUTPUT
          echo "EOF"
        
      - name: 🚀 Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version || github.ref }}
          release_name: RAIDMASTER ${{ github.event.inputs.version || github.ref_name }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false

  build-and-release:
    name: Build and Release APK
    needs: create-release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build_type: [preview, production]
    
    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v4
        
      - name: 🏗 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: npm
          
      - name: 🏗 Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: 🏗 Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔧 Update version in app.json
        run: |
          VERSION=${{ github.event.inputs.version || github.ref_name }}
          VERSION=${VERSION#v}  # Remove 'v' prefix
          node -e "
            const fs = require('fs');
            const app = JSON.parse(fs.readFileSync('app.json', 'utf8'));
            app.expo.version = '$VERSION';
            app.expo.android.versionCode = parseInt('$VERSION'.replace(/\./g, ''));
            fs.writeFileSync('app.json', JSON.stringify(app, null, 2));
          "
          
      - name: 🚀 Build APK
        id: build
        run: |
          echo "Building ${{ matrix.build_type }} APK..."
          BUILD_URL=$(eas build --platform android --profile ${{ matrix.build_type }} --non-interactive --json | jq -r '.[0].logsUrl')
          echo "build_url=$BUILD_URL" >> $GITHUB_OUTPUT
          
          # Wait for build to complete and get download URL
          echo "Waiting for build to complete..."
          while true; do
            STATUS=$(eas build:list --platform android --status finished --limit 1 --json | jq -r '.[0].status')
            if [ "$STATUS" = "FINISHED" ]; then
              DOWNLOAD_URL=$(eas build:list --platform android --status finished --limit 1 --json | jq -r '.[0].artifacts.buildUrl')
              echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
              break
            fi
            sleep 30
          done
          
      - name: ⬇️ Download APK
        if: steps.build.outputs.download_url
        run: |
          curl -L -o "raidmaster-${{ matrix.build_type }}.apk" "${{ steps.build.outputs.download_url }}"
          
      - name: 📤 Upload Release Asset
        if: steps.build.outputs.download_url
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./raidmaster-${{ matrix.build_type }}.apk
          asset_name: RAIDMASTER-${{ github.event.inputs.version || github.ref_name }}-${{ matrix.build_type }}.apk
          asset_content_type: application/vnd.android.package-archive

  notify-success:
    name: Notify Success
    needs: [create-release, build-and-release]
    runs-on: ubuntu-latest
    
    steps:
      - name: 🎉 Success notification
        run: |
          echo "🎉 RAIDMASTER ${{ github.event.inputs.version || github.ref_name }} has been successfully released!"
          echo "📱 APK files are available in the GitHub release."
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.version || github.ref_name }}"