const htmlContent = "<!DOCTYPE html><html lang=\"en\"><head><meta name=\"x-poe-datastore-behavior\" content=\"local_only\"><meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob: https://cdnjs.cloudflare.com https://cdn.jsdelivr.net https://code.jquery.com https://unpkg.com https://d3js.org https://threejs.org https://cdn.plot.ly https://stackpath.bootstrapcdn.com https://maps.googleapis.com https://cdn.tailwindcss.com https://ajax.googleapis.com https://kit.fontawesome.com https://cdn.datatables.net https://maxcdn.bootstrapcdn.com https://code.highcharts.com https://tako-static-assets-production.s3.amazonaws.com https://www.youtube.com https://fonts.googleapis.com https://fonts.gstatic.com https://pfst.cf2.poecdn.net https://puc.poecdn.net https://i.imgur.com https://wikimedia.org https://*.icons8.com https://*.giphy.com https://picsum.photos https://images.unsplash.com; frame-src 'self' https://www.youtube.com https://trytako.com; child-src 'self'; manifest-src 'self'; worker-src 'self'; upgrade-insecure-requests; block-all-mixed-content;\">\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>RAIDMASTER - Professional RAID Management System</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script>\n        tailwind.config = {\n            darkMode: 'class',\n            theme: {\n                extend: {\n                    colors: {\n                        primary: '#5D5CDE',\n                        risk: '#DC2626',\n                        assumption: '#2563EB',\n                        issue: '#EA580C',\n                        dependency: '#7C3AED',\n                        p0: '#DC2626',\n                        p1: '#EA580C',\n                        p2: '#F59E0B',\n                        p3: '#10B981'\n                    }\n                }\n            }\n        };\n    </script>\n    <style>\n        .batch-select-mode .raid-card {\n            transform: translateX(40px);\n        }\n        .batch-select-mode .batch-checkbox {\n            opacity: 1;\n            pointer-events: all;\n        }\n        .batch-checkbox {\n            opacity: 0;\n            pointer-events: none;\n            transition: opacity 0.2s;\n        }\n        .raid-card {\n            transition: transform 0.2s ease-in-out;\n        }\n        .hide-scrollbar {\n            -ms-overflow-style: none;\n            scrollbar-width: none;\n        }\n        .hide-scrollbar::-webkit-scrollbar {\n            display: none;\n        }\n    </style>\n<script src=\"https://puc.poecdn.net/authenticated_preview_page/syncedState.bd4eeeb8e8e02052ee92.js\"></script></head>\n<body class=\"bg-gray-50 dark:bg-gray-900 min-h-screen\">\n    <div id=\"app\" class=\"flex flex-col h-screen\">\n        <!-- Header -->\n        <header class=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3\">\n            <div class=\"flex items-center justify-between\">\n                <div class=\"flex items-center space-x-3\">\n                    <div class=\"w-8 h-8 bg-primary rounded flex items-center justify-center\">\n                        <span class=\"text-white font-bold text-sm\">R</span>\n                    </div>\n                    <h1 class=\"text-xl font-bold text-gray-900 dark:text-white\">RAIDMASTER</h1>\n                </div>\n                <div class=\"flex items-center space-x-3\">\n                    <div class=\"text-right\">\n                        <div class=\"text-xs text-gray-500 dark:text-gray-400\">Total Items</div>\n                        <div class=\"text-lg font-bold text-gray-900 dark:text-white\" id=\"totalItemsCount\">4</div>\n                    </div>\n                    <button id=\"menuBtn\" class=\"p-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors\">\n                        <span class=\"text-lg\">‚ãÆ</span>\n                    </button>\n                </div>\n            </div>\n        </header>\n\n        <!-- Search Bar -->\n        <div class=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3\">\n            <div class=\"relative\">\n                <input type=\"text\" id=\"searchInput\" placeholder=\"Search RAID items...\" class=\"w-full pl-10 pr-4 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-primary focus:border-transparent\">\n                <span class=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\">üîç</span>\n            </div>\n        </div>\n\n        <!-- Tab Navigation -->\n        <nav class=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n            <div class=\"flex overflow-x-auto hide-scrollbar\">\n                <button class=\"tab-btn px-6 py-3 text-sm font-medium text-primary border-b-2 border-primary bg-primary/5\" data-tab=\"raid\">\n                    RAID List\n                </button>\n                <button class=\"tab-btn px-6 py-3 text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300\" data-tab=\"matrix\">\n                    Risk Matrix\n                </button>\n                <button class=\"tab-btn px-6 py-3 text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300\" data-tab=\"timeline\">\n                    Timeline\n                </button>\n                <button class=\"tab-btn px-6 py-3 text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300\" data-tab=\"analytics\">\n                    Analytics\n                </button>\n                <button class=\"tab-btn px-6 py-3 text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300\" data-tab=\"settings\">\n                    Settings\n                </button>\n            </div>\n        </nav>\n\n        <!-- Filter Chips -->\n        <div class=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3\">\n            <div class=\"flex space-x-2 overflow-x-auto hide-scrollbar\" id=\"filterChips\">\n                <button class=\"filter-chip px-3 py-1 rounded-full text-sm font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\" data-filter=\"all\">\n                    All\n                </button>\n                <button class=\"filter-chip px-3 py-1 rounded-full text-sm font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\" data-filter=\"risk\">\n                    Risks\n                </button>\n                <button class=\"filter-chip px-3 py-1 rounded-full text-sm font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\" data-filter=\"assumption\">\n                    Assumptions\n                </button>\n                <button class=\"filter-chip px-3 py-1 rounded-full text-sm font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\" data-filter=\"issue\">\n                    Issues\n                </button>\n                <button class=\"filter-chip px-3 py-1 rounded-full text-sm font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\" data-filter=\"dependency\">\n                    Dependencies\n                </button>\n                <button class=\"filter-chip px-3 py-1 rounded-full text-sm font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\" data-filter=\"P0\">\n                    P0\n                </button>\n                <button class=\"filter-chip px-3 py-1 rounded-full text-sm font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\" data-filter=\"P1\">\n                    P1\n                </button>\n                <button class=\"filter-chip px-3 py-1 rounded-full text-sm font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\" data-filter=\"open\">\n                    Open\n                </button>\n            </div>\n        </div>\n\n        <!-- Main Content Area -->\n        <main class=\"flex-1 overflow-hidden relative\">\n            <!-- RAID List View -->\n            <div id=\"raidView\" class=\"h-full overflow-y-auto\">\n                <!-- AI Analysis Button -->\n                <div class=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n                    <button id=\"runAIAnalysisBtn\" class=\"w-full bg-gradient-to-r from-primary to-purple-600 text-white py-3 px-4 rounded-lg font-medium hover:from-primary/90 hover:to-purple-600/90 transition-all duration-200 flex items-center justify-center shadow-md\">\n                        <span class=\"mr-2\">‚ö°</span>\n                        Run AI Analysis on All Items\n                        <span class=\"ml-2 text-xs bg-white/20 px-2 py-1 rounded\" id=\"aiAnalysisModelBadge\">gpt-4o</span>\n                    </button>\n                </div>\n                <div id=\"raidList\" class=\"p-4 space-y-3\"></div>\n            </div>\n\n            <!-- Risk Matrix View -->\n            <div id=\"matrixView\" class=\"h-full overflow-y-auto hidden\">\n                <div class=\"p-4\">\n                    <div class=\"mb-6\">\n                        <h2 class=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Risk Impact/Probability Matrix</h2>\n                        <div class=\"flex items-center space-x-6 text-sm text-gray-600 dark:text-gray-400\">\n                            <div>Total Items: <span id=\"matrixTotal\" class=\"font-medium\">4</span></div>\n                            <div>High Risk: <span id=\"matrixHighRisk\" class=\"font-medium text-red-600 dark:text-red-400\">2</span></div>\n                        </div>\n                    </div>\n\n                    <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-600\">\n                        <div class=\"grid grid-cols-4 gap-2\">\n                            <!-- Headers -->\n                            <div></div>\n                            <div class=\"text-center text-sm font-medium text-gray-700 dark:text-gray-300 py-2\">Low</div>\n                            <div class=\"text-center text-sm font-medium text-gray-700 dark:text-gray-300 py-2\">Medium</div>\n                            <div class=\"text-center text-sm font-medium text-gray-700 dark:text-gray-300 py-2\">High</div>\n\n                            <!-- High Probability Row -->\n                            <div class=\"text-right text-sm font-medium text-gray-700 dark:text-gray-300 py-2\">High</div>\n                            <div class=\"matrix-cell bg-yellow-100 dark:bg-yellow-900/30 border border-yellow-300 dark:border-yellow-700 rounded p-4 text-center cursor-pointer hover:bg-yellow-200 dark:hover:bg-yellow-900/50 transition-colors\" data-impact=\"low\" data-probability=\"high\">\n                                <div class=\"matrix-count text-2xl font-bold text-yellow-800 dark:text-yellow-200\">0</div>\n                            </div>\n                            <div class=\"matrix-cell bg-orange-100 dark:bg-orange-900/30 border border-orange-300 dark:border-orange-700 rounded p-4 text-center cursor-pointer hover:bg-orange-200 dark:hover:bg-orange-900/50 transition-colors\" data-impact=\"medium\" data-probability=\"high\">\n                                <div class=\"matrix-count text-2xl font-bold text-orange-800 dark:text-orange-200\">1</div>\n                            </div>\n                            <div class=\"matrix-cell bg-red-100 dark:bg-red-900/30 border border-red-300 dark:border-red-700 rounded p-4 text-center cursor-pointer hover:bg-red-200 dark:hover:bg-red-900/50 transition-colors\" data-impact=\"high\" data-probability=\"high\">\n                                <div class=\"matrix-count text-2xl font-bold text-red-800 dark:text-red-200\">1</div>\n                            </div>\n\n                            <!-- Medium Probability Row -->\n                            <div class=\"text-right text-sm font-medium text-gray-700 dark:text-gray-300 py-2\">Medium</div>\n                            <div class=\"matrix-cell bg-green-100 dark:bg-green-900/30 border border-green-300 dark:border-green-700 rounded p-4 text-center cursor-pointer hover:bg-green-200 dark:hover:bg-green-900/50 transition-colors\" data-impact=\"low\" data-probability=\"medium\">\n                                <div class=\"matrix-count text-2xl font-bold text-green-800 dark:text-green-200\">0</div>\n                            </div>\n                            <div class=\"matrix-cell bg-yellow-100 dark:bg-yellow-900/30 border border-yellow-300 dark:border-yellow-700 rounded p-4 text-center cursor-pointer hover:bg-yellow-200 dark:hover:bg-yellow-900/50 transition-colors\" data-impact=\"medium\" data-probability=\"medium\">\n                                <div class=\"matrix-count text-2xl font-bold text-yellow-800 dark:text-yellow-200\">2</div>\n                            </div>\n                            <div class=\"matrix-cell bg-orange-100 dark:bg-orange-900/30 border border-orange-300 dark:border-orange-700 rounded p-4 text-center cursor-pointer hover:bg-orange-200 dark:hover:bg-orange-900/50 transition-colors\" data-impact=\"high\" data-probability=\"medium\">\n                                <div class=\"matrix-count text-2xl font-bold text-orange-800 dark:text-orange-200\">0</div>\n                            </div>\n\n                            <!-- Low Probability Row -->\n                            <div class=\"text-right text-sm font-medium text-gray-700 dark:text-gray-300 py-2\">Low</div>\n                            <div class=\"matrix-cell bg-green-100 dark:bg-green-900/30 border border-green-300 dark:border-green-700 rounded p-4 text-center cursor-pointer hover:bg-green-200 dark:hover:bg-green-900/50 transition-colors\" data-impact=\"low\" data-probability=\"low\">\n                                <div class=\"matrix-count text-2xl font-bold text-green-800 dark:text-green-200\">0</div>\n                            </div>\n                            <div class=\"matrix-cell bg-green-100 dark:bg-green-900/30 border border-green-300 dark:border-green-700 rounded p-4 text-center cursor-pointer hover:bg-green-200 dark:hover:bg-green-900/50 transition-colors\" data-impact=\"medium\" data-probability=\"low\">\n                                <div class=\"matrix-count text-2xl font-bold text-green-800 dark:text-green-200\">1</div>\n                            </div>\n                            <div class=\"matrix-cell bg-yellow-100 dark:bg-yellow-900/30 border border-yellow-300 dark:border-yellow-700 rounded p-4 text-center cursor-pointer hover:bg-yellow-200 dark:hover:bg-yellow-900/50 transition-colors\" data-impact=\"high\" data-probability=\"low\">\n                                <div class=\"matrix-count text-2xl font-bold text-yellow-800 dark:text-yellow-200\">0</div>\n                            </div>\n                        </div>\n\n                        <div class=\"mt-6 text-center\">\n                            <div class=\"text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-1\">Impact ‚Üí</div>\n                            <div class=\"text-xs text-gray-500 dark:text-gray-400\">Probability ‚Üë</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Timeline View -->\n            <div id=\"timelineView\" class=\"h-full overflow-y-auto hidden\">\n                <div class=\"p-4\">\n                    <h2 class=\"text-xl font-bold text-gray-900 dark:text-white mb-6\">RAID Timeline</h2>\n                    <div id=\"timelineContent\" class=\"space-y-4\"></div>\n                </div>\n            </div>\n\n            <!-- Analytics View -->\n            <div id=\"analyticsView\" class=\"h-full overflow-y-auto hidden\">\n                <div class=\"p-4 space-y-6\">\n                    <h2 class=\"text-xl font-bold text-gray-900 dark:text-white\">Analytics Dashboard</h2>\n                    \n                    <!-- Executive Summary Button -->\n                    <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-600\">\n                        <div class=\"flex items-center justify-between mb-4\">\n                            <div>\n                                <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white\">AI Executive Summary</h3>\n                                <p class=\"text-sm text-gray-600 dark:text-gray-400\">Get comprehensive insights on your RAID items</p>\n                            </div>\n                            <div class=\"text-right\">\n                                <div class=\"text-xs text-gray-500 dark:text-gray-400\">Using AI Model</div>\n                                <div class=\"text-sm font-medium text-primary\" id=\"summaryAIModel\">Claude-Sonnet-4</div>\n                            </div>\n                        </div>\n                        \n                        <button id=\"generateSummaryBtn\" class=\"w-full bg-primary text-white py-3 rounded-lg font-medium hover:bg-primary/90 transition-colors flex items-center justify-center\">\n                            <span class=\"mr-2\">‚ö°</span>\n                            Generate AI Executive Summary\n                        </button>\n                    </div>\n\n                    <!-- Quick Stats -->\n                    <div class=\"grid grid-cols-2 gap-4\">\n                        <div class=\"bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-600\">\n                            <div class=\"text-2xl font-bold text-gray-900 dark:text-white\" id=\"totalItemsStat\">4</div>\n                            <div class=\"text-sm text-gray-600 dark:text-gray-400\">Total Items</div>\n                        </div>\n                        <div class=\"bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-600\">\n                            <div class=\"text-2xl font-bold text-red-600 dark:text-red-400\" id=\"highPriorityStat\">2</div>\n                            <div class=\"text-sm text-gray-600 dark:text-gray-400\">P0/P1 Items</div>\n                        </div>\n                    </div>\n\n                    <!-- Distribution Charts -->\n                    <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-600\">\n                        <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Type Distribution</h3>\n                        <div id=\"typeDistribution\" class=\"space-y-3\"></div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Settings View -->\n            <div id=\"settingsView\" class=\"h-full overflow-y-auto hidden\">\n                <div class=\"p-4 space-y-6\">\n                    <h2 class=\"text-xl font-bold text-gray-900 dark:text-white\">Settings</h2>\n                    \n                    <!-- AI Configuration -->\n                    <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-600\">\n                        <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">AI Configuration</h3>\n                        \n                        <div class=\"space-y-4\">\n                            <!-- AI Provider Selection -->\n                            <div>\n                                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">AI Provider</label>\n                                <select id=\"aiProviderSelect\" class=\"w-full px-3 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent\">\n                                    <option value=\"OpenAI\">OpenAI</option>\n                                    <option value=\"Anthropic\">Anthropic</option>\n                                    <option value=\"Gemini\">Google Gemini</option>\n                                </select>\n                            </div>\n\n                            <!-- AI Model Selection -->\n                            <div>\n                                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">AI Model</label>\n                                <select id=\"aiModelSelect\" class=\"w-full px-3 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent\">\n                                    <option value=\"gpt-4o\">GPT-4o (Recommended)</option>\n                                    <option value=\"gpt-4o-mini\">GPT-4o-mini (Cost Effective)</option>\n                                </select>\n                            </div>\n\n                            <!-- API Key Configuration -->\n                            <div id=\"apiKeySection\">\n                                <div class=\"mb-2\">\n                                    <label class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">API Key (Required)</label>\n                                    <p class=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">Enter your AI provider's API key to enable AI features</p>\n                                </div>\n                                <div id=\"apiKeyInput\">\n                                    <input type=\"password\" id=\"apiKeyField\" placeholder=\"Enter your API key...\" class=\"w-full px-3 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent mb-2\">\n                                    <p class=\"text-xs text-gray-500 dark:text-gray-400\">API keys are stored locally and never sent to our servers</p>\n                                </div>\n                            </div>\n\n                            <!-- Auto Apply -->\n                            <div class=\"flex items-center justify-between\">\n                                <div>\n                                    <label class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Auto-apply AI suggestions</label>\n                                    <p class=\"text-xs text-gray-500 dark:text-gray-400\">When confidence is high</p>\n                                </div>\n                                <label class=\"relative inline-flex items-center cursor-pointer\">\n                                    <input type=\"checkbox\" id=\"autoApplyToggle\" class=\"sr-only peer\">\n                                    <div class=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/20 dark:peer-focus:ring-primary/20 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary\"></div>\n                                </label>\n                            </div>\n\n                            <!-- Confidence Threshold -->\n                            <div>\n                                <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Confidence Threshold</label>\n                                <input type=\"range\" id=\"confidenceSlider\" min=\"0\" max=\"1\" step=\"0.1\" value=\"0.8\" class=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\">\n                                <div class=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                                    <span>0%</span>\n                                    <span id=\"confidenceValue\">80%</span>\n                                    <span>100%</span>\n                                </div>\n                            </div>\n\n                            <!-- Usage Stats -->\n                            <div class=\"pt-4 border-t border-gray-200 dark:border-gray-700\">\n                                <h4 class=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Usage Statistics</h4>\n                                <div class=\"text-xs text-gray-500 dark:text-gray-400 space-y-1\">\n                                    <div>Total AI Calls: <span id=\"totalCalls\">0</span></div>\n                                    <div>API Calls: <span id=\"apiCalls\">0</span></div>\n                                    <div>Last Reset: <span id=\"lastReset\">Never</span></div>\n                                </div>\n                                <button id=\"resetStats\" class=\"mt-2 text-xs text-primary hover:text-primary/80\">Reset Statistics</button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <!-- Data Management -->\n                    <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-600\">\n                        <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Data Management</h3>\n                        \n                        <div class=\"space-y-3\">\n                            <button id=\"clearAllData\" class=\"w-full px-4 py-2 bg-red-500 text-white rounded-lg font-medium hover:bg-red-600 transition-colors\">\n                                Clear All Data\n                            </button>\n                            <button id=\"resetToDefaults\" class=\"w-full px-4 py-2 bg-gray-500 text-white rounded-lg font-medium hover:bg-gray-600 transition-colors\">\n                                Reset to Defaults\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </main>\n\n        <!-- Floating Action Button -->\n        <button id=\"fab\" class=\"fixed bottom-6 right-6 w-14 h-14 bg-primary text-white rounded-full shadow-lg hover:bg-primary/90 transition-all duration-200 flex items-center justify-center z-30\">\n            <span class=\"text-2xl\">+</span>\n        </button>\n    </div>\n\n    <script>\n        // Dark mode setup\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            document.documentElement.classList.add('dark');\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {\n            if (event.matches) {\n                document.documentElement.classList.add('dark');\n            } else {\n                document.documentElement.classList.remove('dark');\n            }\n        });\n\n        // Global State\n        let currentTab = 'raid';\n        let currentFilter = 'all';\n        let searchQuery = '';\n        let batchSelectMode = false;\n        let selectedItems = [];\n\n        // AI Configuration with provider-specific API keys\n        let aiConfig = {\n            model: 'gpt-4o',\n            provider: 'OpenAI',\n            autoApply: false,\n            confidenceThreshold: 0.8,\n            usageStats: {\n                totalCalls: 0,\n                apiCalls: 0,\n                lastReset: null\n            }\n        };\n\n        // Provider-specific API keys (saved separately)\n        let apiKeys = {\n            'OpenAI': '',\n            'Anthropic': '',\n            'Gemini': ''\n        };\n\n        // AI Providers configuration\n        const aiProviders = {\n            'OpenAI': {\n                name: 'OpenAI',\n                endpoint: 'https://api.openai.com/v1/chat/completions',\n                models: ['gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-3.5-turbo']\n            },\n            'Anthropic': {\n                name: 'Anthropic', \n                endpoint: 'https://api.anthropic.com/v1/messages',\n                models: ['claude-3-5-sonnet-20241022', 'claude-3-5-haiku-20241022', 'claude-3-opus-20240229']\n            },\n            'Gemini': {\n                name: 'Google Gemini',\n                endpoint: 'https://generativelanguage.googleapis.com/v1beta/models/{model}:generateContent',\n                models: ['gemini-1.5-pro', 'gemini-1.5-flash', 'gemini-1.0-pro']\n            }\n        };\n\n        // Storage keys\n        const STORAGE_KEYS = {\n            RAID_ITEMS: 'raidmaster_items',\n            AI_CONFIG: 'raidmaster_ai_config',\n            API_KEYS: 'raidmaster_api_keys'\n        };\n\n        // Storage functions\n        function saveToLocalStorage(key, data) {\n            try {\n                localStorage.setItem(key, JSON.stringify(data));\n                return true;\n            } catch (error) {\n                console.warn('Failed to save to localStorage:', error);\n                return false;\n            }\n        }\n\n        function loadFromLocalStorage(key, defaultValue = null) {\n            try {\n                const stored = localStorage.getItem(key);\n                return stored ? JSON.parse(stored) : defaultValue;\n            } catch (error) {\n                console.warn('Failed to load from localStorage:', error);\n                return defaultValue;\n            }\n        }\n\n        function saveData() {\n            saveToLocalStorage(STORAGE_KEYS.RAID_ITEMS, raidItems);\n            saveToLocalStorage(STORAGE_KEYS.AI_CONFIG, aiConfig);\n            saveToLocalStorage(STORAGE_KEYS.API_KEYS, apiKeys);\n        }\n\n        function loadSavedData() {\n            // Load AI config\n            const savedAiConfig = loadFromLocalStorage(STORAGE_KEYS.AI_CONFIG);\n            if (savedAiConfig) {\n                aiConfig = { ...aiConfig, ...savedAiConfig };\n            }\n\n            // Load API keys\n            const savedApiKeys = loadFromLocalStorage(STORAGE_KEYS.API_KEYS);\n            if (savedApiKeys) {\n                apiKeys = { ...apiKeys, ...savedApiKeys };\n            }\n\n            // Load RAID items\n            const savedItems = loadFromLocalStorage(STORAGE_KEYS.RAID_ITEMS);\n            if (savedItems && Array.isArray(savedItems)) {\n                raidItems.length = 0;\n                raidItems.push(...savedItems);\n            }\n        }\n\n        // Enhanced RAID Items with proper data structure\n        let raidItems = [\n            {\n                id: 1,\n                type: 'risk',\n                title: 'Third-party API may be deprecated',\n                description: 'The payment provider we depend on has announced potential API changes. Timeline: Q2 2024. Impact: All payment flows. Mitigation: Evaluate alternative providers',\n                status: 'Open',\n                priority: 'P1',\n                impact: 'high',\n                probability: 'medium',\n                workstream: 'Engineering',\n                owner: 'John Doe',\n                dueDate: '2024-01-15',\n                createdAt: '2024-01-10T10:00:00Z',\n                updatedAt: '2024-01-12T14:30:00Z',\n                aiAnalysis: {\n                    suggestedPriority: 'P1',\n                    suggestedStatus: 'In Progress',\n                    confidence: 0.85,\n                    flags: ['potential-blocker', 'requires-approval'],\n                    rationale: 'High impact on core payment functionality with medium probability. Requires immediate attention to evaluate alternatives.',\n                    lastAnalyzedAt: '2024-01-12T14:30:00Z'\n                },\n                history: []\n            },\n            {\n                id: 2,\n                type: 'assumption',\n                title: 'Users will adopt new interface quickly',\n                description: 'Assuming users will transition to the new UI within 30 days based on previous rollout patterns and user feedback from beta testing.',\n                status: 'Open',\n                priority: 'P2',\n                impact: 'medium',\n                probability: 'medium',\n                workstream: 'Product',\n                owner: 'Jane Smith',\n                dueDate: '2024-01-20',\n                createdAt: '2024-01-08T09:15:00Z',\n                updatedAt: '2024-01-10T11:45:00Z',\n                aiAnalysis: null,\n                history: []\n            },\n            {\n                id: 3,\n                type: 'issue',\n                title: 'Performance degradation in search functionality',\n                description: 'Search response times increased by 40% in the last week affecting ~10,000 daily users. Database query optimization needed.',\n                status: 'In Progress',\n                priority: 'P0',\n                impact: 'critical',\n                probability: 'high',\n                workstream: 'Engineering',\n                owner: 'Mike Johnson',\n                dueDate: '2024-01-12',\n                createdAt: '2024-01-09T16:20:00Z',\n                updatedAt: '2024-01-11T13:15:00Z',\n                aiAnalysis: {\n                    suggestedPriority: 'P0',\n                    suggestedStatus: 'In Progress',\n                    confidence: 0.95,\n                    flags: ['performance-critical', 'user-impact', 'requires-hotfix'],\n                    rationale: 'Critical performance degradation affecting large user base. Immediate action required to prevent further user churn.',\n                    lastAnalyzedAt: '2024-01-11T13:15:00Z'\n                },\n                history: []\n            },\n            {\n                id: 4,\n                type: 'dependency',\n                title: 'Legal approval for data processing changes',\n                description: 'Waiting for legal team approval on new data processing procedures including GDPR compliance review and data retention policy updates.',\n                status: 'Open',\n                priority: 'P2',\n                impact: 'medium',\n                probability: 'low',\n                workstream: 'Legal',\n                owner: 'Lisa Garcia',\n                dueDate: '2024-01-25',\n                createdAt: '2024-01-05T14:00:00Z',\n                updatedAt: '2024-01-08T10:30:00Z',\n                aiAnalysis: null,\n                history: []\n            }\n        ];\n\n        // Custom alert and confirm functions\n        function showAlert(message) {\n            const modal = document.createElement('div');\n            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\n            modal.innerHTML = `\n                <div class=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg max-w-sm w-full mx-4\">\n                    <p class=\"text-gray-700 dark:text-gray-300 mb-4\">${message}</p>\n                    <button class=\"w-full px-4 py-2 bg-primary text-white rounded-lg font-medium hover:bg-primary/90 transition-colors\" onclick=\"document.body.removeChild(this.closest('.fixed'))\">OK</button>\n                </div>\n            `;\n            document.body.appendChild(modal);\n        }\n\n        function showConfirm(message, onConfirm) {\n            const modal = document.createElement('div');\n            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\n            modal.innerHTML = `\n                <div class=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg max-w-sm w-full mx-4\">\n                    <p class=\"text-gray-700 dark:text-gray-300 mb-4\">${message}</p>\n                    <div class=\"flex justify-end space-x-3\">\n                        <button class=\"px-4 py-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded\" onclick=\"document.body.removeChild(this.closest('.fixed'))\">Cancel</button>\n                        <button class=\"px-4 py-2 bg-red-500 text-white hover:bg-red-600 rounded\" onclick=\"document.body.removeChild(this.closest('.fixed')); (${onConfirm})()\">Confirm</button>\n                    </div>\n                </div>\n            `;\n            document.body.appendChild(modal);\n        }\n\n        function showToast(message) {\n            const toast = document.createElement('div');\n            toast.className = 'fixed bottom-20 left-1/2 transform -translate-x-1/2 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 px-4 py-2 rounded-lg shadow-lg z-50 transition-opacity';\n            toast.textContent = message;\n            \n            document.body.appendChild(toast);\n            \n            setTimeout(() => {\n                toast.style.opacity = '0';\n                setTimeout(() => {\n                    if (document.body.contains(toast)) {\n                        document.body.removeChild(toast);\n                    }\n                }, 300);\n            }, 3000);\n        }\n\n        function addRaidItem(formData) {\n            const newItem = {\n                id: Date.now(),\n                type: formData.type,\n                title: formData.title,\n                description: formData.description || '',\n                status: formData.status || 'Open',\n                priority: formData.priority || 'P2',\n                impact: formData.impact || 'medium',\n                probability: formData.probability || 'medium',\n                workstream: formData.workstream || 'General',\n                owner: formData.owner || 'Current User',\n                dueDate: formData.dueDate || null,\n                createdAt: new Date().toISOString(),\n                updatedAt: new Date().toISOString(),\n                aiAnalysis: null,\n                history: []\n            };\n\n            raidItems.unshift(newItem);\n            updateCounts();\n            \n            if (currentTab === 'raid') {\n                renderRaidList();\n            } else if (currentTab === 'matrix') {\n                updateMatrixCounts();\n            }\n            \n            showToast('RAID item added successfully');\n        }\n\n        function openCreateItemModal() {\n            const modal = document.createElement('div');\n            modal.className = 'fixed inset-0 bg-black bg-opacity-50 z-50 flex items-end justify-center';\n            modal.innerHTML = `\n                <div class=\"bg-white dark:bg-gray-800 w-full max-w-md rounded-t-xl p-6 transform translate-y-full transition-transform duration-300 max-h-[90vh] overflow-y-auto\">\n                    <div class=\"flex items-center justify-between mb-6\">\n                        <h2 class=\"text-xl font-bold text-gray-900 dark:text-white\">Add RAID Item</h2>\n                        <button class=\"close-modal p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\">\n                            <span class=\"text-lg\">‚úï</span>\n                        </button>\n                    </div>\n                    \n                    <form id=\"createForm\" class=\"space-y-4\">\n                        <!-- Type -->\n                        <div>\n                            <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Type</label>\n                            <select id=\"itemType\" class=\"w-full px-4 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent\">\n                                <option value=\"risk\">Risk</option>\n                                <option value=\"assumption\">Assumption</option>\n                                <option value=\"issue\">Issue</option>\n                                <option value=\"dependency\">Dependency</option>\n                            </select>\n                        </div>\n\n                        <!-- Title -->\n                        <div>\n                            <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Title</label>\n                            <input type=\"text\" id=\"itemTitle\" required class=\"w-full px-4 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent\" placeholder=\"Enter item title...\">\n                        </div>\n\n                        <!-- Description -->\n                        <div>\n                            <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Description</label>\n                            <textarea id=\"itemDescription\" rows=\"3\" class=\"w-full px-4 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent\" placeholder=\"Describe the item...\"></textarea>\n                        </div>\n\n                        <!-- Priority -->\n                        <div>\n                            <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Priority</label>\n                            <select id=\"itemPriority\" class=\"w-full px-4 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent\">\n                                <option value=\"P0\">P0 - Critical</option>\n                                <option value=\"P1\">P1 - High</option>\n                                <option value=\"P2\" selected>P2 - Medium</option>\n                                <option value=\"P3\">P3 - Low</option>\n                            </select>\n                        </div>\n\n                        <!-- Impact -->\n                        <div>\n                            <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Impact</label>\n                            <select id=\"itemImpact\" class=\"w-full px-4 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent\">\n                                <option value=\"low\">Low</option>\n                                <option value=\"medium\" selected>Medium</option>\n                                <option value=\"high\">High</option>\n                                <option value=\"critical\">Critical</option>\n                            </select>\n                        </div>\n\n                        <!-- Probability -->\n                        <div>\n                            <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Probability</label>\n                            <select id=\"itemProbability\" class=\"w-full px-4 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent\">\n                                <option value=\"low\">Low</option>\n                                <option value=\"medium\" selected>Medium</option>\n                                <option value=\"high\">High</option>\n                            </select>\n                        </div>\n\n                        <!-- Owner -->\n                        <div>\n                            <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Owner</label>\n                            <input type=\"text\" id=\"itemOwner\" class=\"w-full px-4 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent\" placeholder=\"Assign owner...\">\n                        </div>\n\n                        <!-- Workstream -->\n                        <div>\n                            <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Workstream</label>\n                            <input type=\"text\" id=\"itemWorkstream\" class=\"w-full px-4 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent\" placeholder=\"Enter workstream...\">\n                        </div>\n\n                        <!-- Due Date -->\n                        <div>\n                            <label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Due Date</label>\n                            <input type=\"date\" id=\"itemDueDate\" class=\"w-full px-4 py-2 text-base border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent\">\n                        </div>\n\n                        <!-- Actions -->\n                        <div class=\"flex space-x-3 pt-4 mt-6 border-t border-gray-200 dark:border-gray-700\">\n                            <button type=\"button\" class=\"cancel-create flex-1 px-4 py-3 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg font-medium hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\">\n                                Cancel\n                            </button>\n                            <button type=\"submit\" class=\"flex-1 px-4 py-3 bg-primary text-white rounded-lg font-medium hover:bg-primary/90 transition-colors\">\n                                Create Item\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            `;\n\n            modal.querySelector('.close-modal').addEventListener('click', () => {\n                modal.querySelector('.bg-white').style.transform = 'translateY(100%)';\n                setTimeout(() => document.body.removeChild(modal), 300);\n            });\n\n            modal.querySelector('.cancel-create').addEventListener('click', () => {\n                modal.querySelector('.bg-white').style.transform = 'translateY(100%)';\n                setTimeout(() => document.body.removeChild(modal), 300);\n            });\n\n            modal.querySelector('#createForm').addEventListener('submit', (e) => {\n                e.preventDefault();\n                \n                const formData = {\n                    type: modal.querySelector('#itemType').value,\n                    title: modal.querySelector('#itemTitle').value.trim(),\n                    description: modal.querySelector('#itemDescription').value.trim(),\n                    priority: modal.querySelector('#itemPriority').value,\n                    impact: modal.querySelector('#itemImpact').value,\n                    probability: modal.querySelector('#itemProbability').value,\n                    owner: modal.querySelector('#itemOwner').value.trim(),\n                    workstream: modal.querySelector('#itemWorkstream').value.trim(),\n                    dueDate: modal.querySelector('#itemDueDate').value || null\n                };\n\n                if (!formData.title) {\n                    showAlert('Please enter a title for the RAID item');\n                    return;\n                }\n\n                addRaidItem(formData);\n                \n                modal.querySelector('.bg-white').style.transform = 'translateY(100%)';\n                setTimeout(() => document.body.removeChild(modal), 300);\n            });\n\n            document.body.appendChild(modal);\n            setTimeout(() => {\n                modal.querySelector('.bg-white').style.transform = 'translateY(0)';\n            }, 10);\n        }\n\n        function updateCounts() {\n            const total = raidItems.length;\n            document.getElementById('totalItemsCount').textContent = total;\n            if (document.getElementById('totalItemsStat')) {\n                document.getElementById('totalItemsStat').textContent = total;\n            }\n            if (document.getElementById('highPriorityStat')) {\n                document.getElementById('highPriorityStat').textContent = raidItems.filter(i => ['P0', 'P1'].includes(i.priority)).length;\n            }\n        }\n\n        function renderRaidList() {\n            const container = document.getElementById('raidList');\n            const filtered = filterRaidItems(raidItems);\n            \n            if (filtered.length === 0) {\n                container.innerHTML = `\n                    <div class=\"text-center py-12\">\n                        <div class=\"w-16 h-16 text-gray-400 mx-auto mb-4 text-4xl\">üì•</div>\n                        <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No RAID items found</h3>\n                        <p class=\"text-gray-500 dark:text-gray-400 mb-6\">Get started by creating your first RAID item</p>\n                        <button onclick=\"openCreateItemModal()\" class=\"bg-primary text-white px-6 py-2 rounded-lg font-medium hover:bg-primary/90 transition-colors\">\n                            Create RAID Item\n                        </button>\n                    </div>\n                `;\n                return;\n            }\n\n            container.innerHTML = filtered.map(item => createRaidCard(item)).join('');\n        }\n\n        function createRaidCard(item) {\n            const typeColors = {\n                risk: 'bg-risk',\n                assumption: 'bg-assumption',\n                issue: 'bg-issue',\n                dependency: 'bg-dependency'\n            };\n\n            const priorityColors = {\n                P0: 'bg-p0',\n                P1: 'bg-p1',\n                P2: 'bg-p2',\n                P3: 'bg-p3'\n            };\n\n            const statusColors = {\n                'Open': 'bg-blue-500',\n                'In Progress': 'bg-indigo-500',\n                'Mitigating': 'bg-indigo-500',\n                'Resolved': 'bg-green-500',\n                'Closed': 'bg-green-500',\n                'Archived': 'bg-gray-500'\n            };\n\n            return `\n                <div class=\"raid-card relative bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-600 p-4 hover:shadow-md transition-all duration-200 cursor-pointer\" \n                     onclick=\"openItemDetail(${item.id})\">\n\n                    <div class=\"flex items-start justify-between mb-3\">\n                        <div class=\"flex items-center space-x-2\">\n                            <span class=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium text-white ${typeColors[item.type]}\">\n                                ${item.type.charAt(0).toUpperCase() + item.type.slice(1)}\n                            </span>\n                            <span class=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium text-white ${priorityColors[item.priority]}\">\n                                ${item.priority}\n                            </span>\n                        </div>\n                        <span class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium text-white ${statusColors[item.status]}\">\n                            ${item.status}\n                        </span>\n                    </div>\n                    \n                    <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white mb-2 line-clamp-2\">${item.title}</h3>\n                    \n                    <p class=\"text-gray-600 dark:text-gray-400 text-sm mb-3 line-clamp-2\">${item.description}</p>\n                    \n                    <div class=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400\">\n                        <div class=\"flex items-center space-x-4\">\n                            <span>üë§ ${item.owner}</span>\n                            <span>üìÅ ${item.workstream}</span>\n                        </div>\n                        ${item.dueDate ? `<span class=\"text-gray-500 dark:text-gray-400\">üìÖ ${formatDate(item.dueDate)}</span>` : ''}\n                    </div>\n                    \n                    ${item.aiAnalysis ? `\n                    <div class=\"mt-3 flex items-center justify-between\">\n                        <div class=\"flex items-center space-x-2\">\n                            <div class=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                            <span class=\"text-xs text-green-600 dark:text-green-400\">AI Analyzed (${Math.round((item.aiAnalysis.confidence || 0) * 100)}%)</span>\n                        </div>\n                    </div>\n                    ` : ''}\n                </div>\n            `;\n        }\n\n        function filterRaidItems(items) {\n            return items.filter(item => {\n                // Filter by type/priority/status\n                if (currentFilter !== 'all') {\n                    if (!['open', 'closed', 'resolved'].includes(currentFilter.toLowerCase())) {\n                        // Type or priority filter\n                        if (item.type !== currentFilter && item.priority !== currentFilter) {\n                            return false;\n                        }\n                    } else {\n                        // Status filter\n                        if (item.status.toLowerCase().replace(' ', '') !== currentFilter) {\n                            return false;\n                        }\n                    }\n                }\n                \n                // Search filter\n                if (searchQuery) {\n                    const searchText = `${item.title} ${item.description} ${item.owner} ${item.workstream}`.toLowerCase();\n                    return searchText.includes(searchQuery);\n                }\n                \n                return true;\n            });\n        }\n\n        function updateMatrixCounts() {\n            const matrix = {};\n            \n            // Initialize matrix\n            ['low', 'medium', 'high'].forEach(prob => {\n                matrix[prob] = {};\n                ['low', 'medium', 'high', 'critical'].forEach(impact => {\n                    matrix[prob][impact] = 0;\n                });\n            });\n\n            // Count items in each cell\n            raidItems.forEach(item => {\n                if (item.impact && item.probability) {\n                    const impact = item.impact === 'critical' ? 'high' : item.impact; // Map critical to high for matrix\n                    matrix[item.probability][impact]++;\n                }\n            });\n\n            // Update UI\n            document.querySelectorAll('.matrix-cell').forEach(cell => {\n                const impact = cell.dataset.impact;\n                const probability = cell.dataset.probability;\n                const count = matrix[probability][impact] || 0;\n                cell.querySelector('.matrix-count').textContent = count;\n            });\n\n            // Update summary\n            const total = raidItems.length;\n            const highRisk = raidItems.filter(item => \n                (item.impact === 'high' || item.impact === 'critical') && \n                (item.probability === 'medium' || item.probability === 'high')\n            ).length;\n\n            document.getElementById('matrixTotal').textContent = total;\n            document.getElementById('matrixHighRisk').textContent = highRisk;\n        }\n\n        function renderTimeline() {\n            const container = document.getElementById('timelineContent');\n            const sortedItems = [...raidItems].sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n            \n            if (sortedItems.length === 0) {\n                container.innerHTML = '<div class=\"text-center py-8 text-gray-500 dark:text-gray-400\">No timeline data available</div>';\n                return;\n            }\n\n            container.innerHTML = sortedItems.map(item => `\n                <div class=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-600 p-4\">\n                    <div class=\"flex items-center justify-between mb-2\">\n                        <h3 class=\"font-semibold text-gray-900 dark:text-white\">${item.title}</h3>\n                        <span class=\"text-sm text-gray-500 dark:text-gray-400\">${formatDate(item.updatedAt)}</span>\n                    </div>\n                    <div class=\"flex items-center space-x-2 mb-2\">\n                        <span class=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium text-white bg-${item.type === 'risk' ? 'risk' : item.type === 'assumption' ? 'assumption' : item.type === 'issue' ? 'issue' : 'dependency'}\">\n                            ${item.type.charAt(0).toUpperCase() + item.type.slice(1)}\n                        </span>\n                        <span class=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium text-white bg-${item.priority === 'P0' ? 'p0' : item.priority === 'P1' ? 'p1' : item.priority === 'P2' ? 'p2' : 'p3'}\">\n                            ${item.priority}\n                        </span>\n                    </div>\n                    <p class=\"text-sm text-gray-600 dark:text-gray-400\">${item.description.substring(0, 120)}...</p>\n                </div>\n            `).join('');\n        }\n\n        function renderAnalytics() {\n            // Update type distribution\n            const typeDistribution = document.getElementById('typeDistribution');\n            const total = raidItems.length;\n            \n            if (total === 0) {\n                typeDistribution.innerHTML = '<div class=\"text-center py-4 text-gray-500 dark:text-gray-400\">No data to display</div>';\n                return;\n            }\n\n            const types = ['risk', 'assumption', 'issue', 'dependency'];\n            const typeColors = ['bg-risk', 'bg-assumption', 'bg-issue', 'bg-dependency'];\n            \n            typeDistribution.innerHTML = types.map((type, index) => {\n                const count = raidItems.filter(item => item.type === type).length;\n                const percentage = Math.round((count / total) * 100);\n                \n                return `\n                    <div class=\"flex items-center justify-between\">\n                        <div class=\"flex items-center space-x-3\">\n                            <div class=\"w-4 h-4 rounded ${typeColors[index]}\"></div>\n                            <span class=\"text-sm text-gray-700 dark:text-gray-300\">${type.charAt(0).toUpperCase() + type.slice(1)}s</span>\n                        </div>\n                        <div class=\"flex items-center space-x-2\">\n                            <span class=\"text-sm font-medium text-gray-900 dark:text-white\">${count}</span>\n                            <span class=\"text-xs text-gray-500 dark:text-gray-400\">(${percentage}%)</span>\n                        </div>\n                    </div>\n                `;\n            }).join('');\n        }\n\n        function openItemDetail(itemId) {\n            const item = raidItems.find(i => i.id === itemId);\n            if (!item) return;\n            \n            showAlert(`Item Details: ${item.title}\\n\\nType: ${item.type}\\nPriority: ${item.priority}\\nStatus: ${item.status}\\nOwner: ${item.owner}\\nDescription: ${item.description}`);\n        }\n\n        function formatDate(dateString) {\n            if (!dateString) return '';\n            try {\n                const date = new Date(dateString);\n                return date.toLocaleDateString('en-US', { \n                    year: 'numeric', \n                    month: 'short', \n                    day: 'numeric' \n                });\n            } catch (error) {\n                return dateString;\n            }\n        }\n\n        // Initialize the app\n        function initApp() {\n            console.log('üöÄ Initializing RAIDMASTER...');\n            \n            // Load saved data first\n            loadSavedData();\n            \n            // Update UI with current AI model\n            const aiAnalysisBadge = document.getElementById('aiAnalysisModelBadge');\n            if (aiAnalysisBadge) {\n                aiAnalysisBadge.textContent = aiConfig.model;\n            }\n            \n            const summaryAIModel = document.getElementById('summaryAIModel');\n            if (summaryAIModel) {\n                summaryAIModel.textContent = aiConfig.model;\n            }\n            \n            updateCounts();\n            renderRaidList();\n            \n            // Set up event listeners\n            setupTabNavigation();\n            setupFilterChips();\n            setupSearchInput();\n            setupFAB();\n            setupBasicSettings();\n            setupMenuButton();\n            setupSettingsPanel();\n            setupAIAnalysisButton();\n            \n            // Initialize settings display\n            updateSettingsDisplay();\n            \n            console.log('‚úÖ RAIDMASTER initialized successfully');\n        }\n\n        function setupAIAnalysisButton() {\n            const runAIAnalysisBtn = document.getElementById('runAIAnalysisBtn');\n            if (runAIAnalysisBtn) {\n                runAIAnalysisBtn.addEventListener('click', () => {\n                    runAIAnalysis();\n                });\n            }\n\n            // Setup Generate Summary button\n            const generateSummaryBtn = document.getElementById('generateSummaryBtn');\n            if (generateSummaryBtn) {\n                generateSummaryBtn.addEventListener('click', () => {\n                    generateExecutiveSummary();\n                });\n            }\n        }\n\n        function setupTabNavigation() {\n            document.querySelectorAll('.tab-btn').forEach(btn => {\n                btn.addEventListener('click', () => {\n                    const tab = btn.dataset.tab;\n                    switchTab(tab);\n                });\n            });\n        }\n\n        function switchTab(tab) {\n            currentTab = tab;\n            \n            // Update tab buttons\n            document.querySelectorAll('.tab-btn').forEach(btn => {\n                btn.classList.remove('text-primary', 'border-b-2', 'border-primary', 'bg-primary/5');\n                btn.classList.add('text-gray-500', 'dark:text-gray-400');\n            });\n            \n            document.querySelector(`[data-tab=\"${tab}\"]`).classList.remove('text-gray-500', 'dark:text-gray-400');\n            document.querySelector(`[data-tab=\"${tab}\"]`).classList.add('text-primary', 'border-b-2', 'border-primary', 'bg-primary/5');\n            \n            // Hide all views\n            document.querySelectorAll('[id$=\"View\"]').forEach(view => {\n                view.classList.add('hidden');\n            });\n            \n            // Show selected view\n            document.getElementById(`${tab}View`).classList.remove('hidden');\n            \n            // Initialize view-specific content\n            if (tab === 'matrix') {\n                updateMatrixCounts();\n            } else if (tab === 'timeline') {\n                renderTimeline();\n            } else if (tab === 'analytics') {\n                renderAnalytics();\n            }\n        }\n\n        function setupFilterChips() {\n            document.querySelectorAll('.filter-chip').forEach(chip => {\n                chip.addEventListener('click', () => {\n                    currentFilter = chip.dataset.filter;\n                    \n                    // Update chip styles\n                    document.querySelectorAll('.filter-chip').forEach(c => {\n                        c.classList.remove('bg-primary', 'text-white');\n                        c.classList.add('bg-gray-100', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');\n                    });\n                    \n                    chip.classList.remove('bg-gray-100', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');\n                    chip.classList.add('bg-primary', 'text-white');\n                    \n                    renderRaidList();\n                });\n            });\n        }\n\n        function setupSearchInput() {\n            const searchInput = document.getElementById('searchInput');\n            searchInput.addEventListener('input', (e) => {\n                searchQuery = e.target.value.toLowerCase();\n                renderRaidList();\n            });\n        }\n\n        function setupFAB() {\n            document.getElementById('fab').addEventListener('click', () => {\n                openCreateItemModal();\n            });\n        }\n\n        function setupBasicSettings() {\n            // Clear all data\n            const clearAllData = document.getElementById('clearAllData');\n            if (clearAllData) {\n                clearAllData.addEventListener('click', () => {\n                    showConfirm('Are you sure you want to clear all RAID items?', () => {\n                        raidItems.length = 0;\n                        updateCounts();\n                        renderRaidList();\n                        saveData();\n                        showToast('All data cleared');\n                    });\n                });\n            }\n\n            // Reset to defaults\n            const resetToDefaults = document.getElementById('resetToDefaults');\n            if (resetToDefaults) {\n                resetToDefaults.addEventListener('click', () => {\n                    showConfirm('Reset all items to default examples?', () => {\n                        location.reload();\n                    });\n                });\n            }\n        }\n\n        // Menu functionality\n        let isMenuOpen = false;\n\n        function setupMenuButton() {\n            document.getElementById('menuBtn').addEventListener('click', (e) => {\n                e.stopPropagation();\n                if (isMenuOpen) {\n                    closeDropdownMenu();\n                } else {\n                    openDropdownMenu();\n                }\n            });\n        }\n\n        function openDropdownMenu() {\n            const existingMenu = document.getElementById('dropdownMenu');\n            if (existingMenu) {\n                document.body.removeChild(existingMenu);\n            }\n\n            const menu = document.createElement('div');\n            menu.id = 'dropdownMenu';\n            menu.className = 'fixed top-16 right-4 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-600 py-2 z-50 min-w-64 max-w-xs opacity-0 scale-95 transform transition-all duration-200';\n            \n            menu.innerHTML = `\n                <div class=\"px-4 py-3 border-b border-gray-200 dark:border-gray-700\">\n                    <h3 class=\"font-semibold text-gray-900 dark:text-white\">Actions</h3>\n                </div>\n                \n                <button id=\"runAIAnalysisMenu\" class=\"w-full px-4 py-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors flex items-center space-x-3\">\n                    <span class=\"text-xl\">‚ö°</span>\n                    <div>\n                        <div class=\"font-medium text-gray-900 dark:text-white\">Run AI Analysis</div>\n                        <div class=\"text-sm text-gray-500 dark:text-gray-400\">Analyze all RAID items with AI</div>\n                    </div>\n                </button>\n\n                <button id=\"exportData\" class=\"w-full px-4 py-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors flex items-center space-x-3\">\n                    <span class=\"text-xl\">üì•</span>\n                    <div>\n                        <div class=\"font-medium text-gray-900 dark:text-white\">Export Data</div>\n                        <div class=\"text-sm text-gray-500 dark:text-gray-400\">Download JSON</div>\n                    </div>\n                </button>\n                \n                <button id=\"refreshData\" class=\"w-full px-4 py-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors flex items-center space-x-3\">\n                    <span class=\"text-xl\">üîÑ</span>\n                    <div>\n                        <div class=\"font-medium text-gray-900 dark:text-white\">Refresh</div>\n                        <div class=\"text-sm text-gray-500 dark:text-gray-400\">Reload RAID items</div>\n                    </div>\n                </button>\n            `;\n\n            // Add event listeners\n            menu.querySelector('#runAIAnalysisMenu').addEventListener('click', () => {\n                closeDropdownMenu();\n                runAIAnalysis();\n            });\n\n            menu.querySelector('#exportData').addEventListener('click', () => {\n                closeDropdownMenu();\n                exportData();\n            });\n\n            menu.querySelector('#refreshData').addEventListener('click', () => {\n                closeDropdownMenu();\n                triggerRefresh();\n            });\n\n            document.body.appendChild(menu);\n            \n            // Animate in\n            setTimeout(() => {\n                menu.style.opacity = '1';\n                menu.style.transform = 'scale(1)';\n            }, 10);\n            \n            isMenuOpen = true;\n\n            // Close menu when clicking outside\n            const closeOnOutsideClick = (e) => {\n                if (!menu.contains(e.target) && !document.getElementById('menuBtn').contains(e.target)) {\n                    closeDropdownMenu();\n                    document.removeEventListener('click', closeOnOutsideClick);\n                }\n            };\n            setTimeout(() => {\n                document.addEventListener('click', closeOnOutsideClick);\n            }, 100);\n        }\n\n        function closeDropdownMenu() {\n            const menu = document.getElementById('dropdownMenu');\n            if (menu) {\n                menu.style.opacity = '0';\n                menu.style.transform = 'scale(0.95)';\n                setTimeout(() => {\n                    if (document.body.contains(menu)) {\n                        document.body.removeChild(menu);\n                    }\n                }, 200);\n            }\n            isMenuOpen = false;\n        }\n\n        // AI Functions\n        async function runAIAnalysis() {\n            if (raidItems.length === 0) {\n                showAlert('No RAID items to analyze');\n                return;\n            }\n\n            const currentApiKey = apiKeys[aiConfig.provider];\n            if (!currentApiKey || !currentApiKey.trim()) {\n                showAlert(`Please configure your ${aiConfig.provider} API key in Settings to use AI features.`);\n                return;\n            }\n\n            showLoadingModal('Running AI Analysis...');\n            \n            try {\n                const analysisPrompt = `Analyze these RAID items and provide priority/status recommendations. Provide ONLY raw JSON in your response with no explanations, additional text, or code block formatting (no \\`\\`\\`).\n\nItems to analyze:\n${JSON.stringify(raidItems.map(item => ({\n    id: item.id,\n    type: item.type,\n    title: item.title,\n    description: item.description,\n    priority: item.priority,\n    status: item.status,\n    impact: item.impact,\n    probability: item.probability,\n    dueDate: item.dueDate,\n    workstream: item.workstream\n})), null, 2)}\n\nReturn JSON array with objects containing:\n- id: item ID\n- suggestedPriority: \"P0\"|\"P1\"|\"P2\"|\"P3\"  \n- suggestedStatus: current status or recommended change\n- confidence: number 0-1 (confidence in analysis)\n- rationale: brief explanation\n- flags: array of concern flags [\"urgent\", \"blocking\", \"unclear\", \"overdue\", etc.]\n\nAnalysis criteria:\n- P0: Business critical, immediate action required\n- P1: High impact, resolve within days  \n- P2: Medium impact, planned resolution\n- P3: Low impact, backlog item`;\n\n                const analysisResponse = await callAI(analysisPrompt);\n                hideLoadingModal();\n                \n                if (analysisResponse && analysisResponse.trim()) {\n                    try {\n                        const analysisResults = JSON.parse(analysisResponse);\n                        \n                        // Apply analysis results to items\n                        analysisResults.forEach(result => {\n                            const item = raidItems.find(i => i.id == result.id);\n                            if (item) {\n                                item.aiAnalysis = {\n                                    suggestedPriority: result.suggestedPriority,\n                                    suggestedStatus: result.suggestedStatus,\n                                    confidence: result.confidence,\n                                    flags: result.flags || [],\n                                    rationale: result.rationale,\n                                    lastAnalyzedAt: new Date().toISOString()\n                                };\n                                \n                                item.updatedAt = new Date().toISOString();\n                                \n                                // Auto-apply if high confidence and enabled\n                                if (aiConfig.autoApply && (result.confidence || 0) >= aiConfig.confidenceThreshold) {\n                                    item.priority = result.suggestedPriority;\n                                    if (result.suggestedStatus && result.suggestedStatus !== item.status) {\n                                        item.status = result.suggestedStatus;\n                                    }\n                                }\n                            }\n                        });\n                        \n                        // Update usage stats\n                        aiConfig.usageStats.totalCalls++;\n                        aiConfig.usageStats.apiCalls++;\n                        saveData();\n                        \n                        // Refresh views\n                        if (currentTab === 'raid') {\n                            renderRaidList();\n                        } else if (currentTab === 'matrix') {\n                            updateMatrixCounts();\n                        }\n                        \n                        showToast(`AI analysis completed on ${raidItems.length} items by ${aiConfig.model}`);\n                        \n                    } catch (parseError) {\n                        console.error('Error parsing AI analysis results:', parseError);\n                        showAlert('Failed to parse AI analysis results. Please try again.');\n                    }\n                } else {\n                    throw new Error('AI returned empty response');\n                }\n                \n            } catch (error) {\n                hideLoadingModal();\n                console.error(\"AI Analysis failed:\", error);\n                \n                if (error.message === 'CORS_ERROR') {\n                    showCORSErrorModal();\n                } else {\n                    showAlert(`AI analysis failed: ${error.message}`);\n                }\n            }\n        }\n\n        async function callAI(prompt) {\n            const provider = aiProviders[aiConfig.provider];\n            const apiKey = apiKeys[aiConfig.provider];\n            \n            if (!provider || !apiKey) {\n                throw new Error(`Provider ${aiConfig.provider} or API key not configured`);\n            }\n\n            let headers = {};\n            let requestBody = {};\n            let endpoint = provider.endpoint;\n\n            // Build request based on provider\n            if (aiConfig.provider === 'OpenAI') {\n                headers = {\n                    'Authorization': `Bearer ${apiKey}`,\n                    'Content-Type': 'application/json'\n                };\n                requestBody = {\n                    model: aiConfig.model,\n                    messages: [{ role: 'user', content: prompt }],\n                    max_tokens: 4000,\n                    temperature: 0.1\n                };\n            } else if (aiConfig.provider === 'Anthropic') {\n                headers = {\n                    'x-api-key': apiKey,\n                    'Content-Type': 'application/json',\n                    'anthropic-version': '2023-06-01'\n                };\n                requestBody = {\n                    model: aiConfig.model,\n                    max_tokens: 4000,\n                    messages: [{ role: 'user', content: prompt }],\n                    temperature: 0.1\n                };\n            } else if (aiConfig.provider === 'Gemini') {\n                endpoint = provider.endpoint.replace('{model}', aiConfig.model);\n                endpoint += `?key=${apiKey}`;\n                headers = {\n                    'Content-Type': 'application/json'\n                };\n                requestBody = {\n                    contents: [{\n                        parts: [{ text: prompt }]\n                    }],\n                    generationConfig: {\n                        maxOutputTokens: 4000,\n                        temperature: 0.1\n                    }\n                };\n            }\n\n            try {\n                const response = await fetch(endpoint, {\n                    method: 'POST',\n                    headers: headers,\n                    body: JSON.stringify(requestBody)\n                });\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    throw new Error(`API call failed: ${response.status} ${errorText}`);\n                }\n\n                const data = await response.json();\n                \n                // Extract response based on provider\n                let content = '';\n                if (aiConfig.provider === 'OpenAI') {\n                    content = data.choices[0].message.content;\n                } else if (aiConfig.provider === 'Anthropic') {\n                    content = data.content[0].text;\n                } else if (aiConfig.provider === 'Gemini') {\n                    content = data.candidates[0].content.parts[0].text;\n                }\n                \n                return content;\n            } catch (error) {\n                // Handle CORS and network errors\n                if (error.message === 'Failed to fetch' || error.name === 'TypeError') {\n                    throw new Error('CORS_ERROR');\n                }\n                throw error;\n            }\n        }\n\n        function showLoadingModal(message = 'Processing...') {\n            const modal = document.createElement('div');\n            modal.id = 'loadingModal';\n            modal.className = 'fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center';\n            modal.innerHTML = `\n                <div class=\"bg-white dark:bg-gray-800 rounded-lg p-8 max-w-sm w-full mx-4\">\n                    <div class=\"text-center\">\n                        <div class=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse\">\n                            <span class=\"text-white text-xl\">‚ö°</span>\n                        </div>\n                        <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">AI Processing</h3>\n                        <p class=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">${message}</p>\n                        <div class=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                            <div class=\"bg-primary h-2 rounded-full animate-pulse\" style=\"width: 60%\"></div>\n                        </div>\n                    </div>\n                </div>\n            `;\n            document.body.appendChild(modal);\n        }\n\n        function hideLoadingModal() {\n            const modal = document.getElementById('loadingModal');\n            if (modal) {\n                document.body.removeChild(modal);\n            }\n        }\n\n        function showCORSErrorModal() {\n            const modal = document.createElement('div');\n            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\n            modal.innerHTML = `\n                <div class=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg max-w-lg w-full mx-4\">\n                    <div class=\"flex items-start space-x-4\">\n                        <div class=\"flex-shrink-0\">\n                            <div class=\"w-12 h-12 bg-yellow-100 dark:bg-yellow-900/30 rounded-full flex items-center justify-center\">\n                                <span class=\"text-2xl\">‚ö†Ô∏è</span>\n                            </div>\n                        </div>\n                        <div class=\"flex-1\">\n                            <h3 class=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">AI Features Not Available</h3>\n                            <p class=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n                                AI analysis cannot run when opening this HTML file directly in your browser due to CORS (Cross-Origin Resource Sharing) security restrictions.\n                            </p>\n                            \n                            <div class=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-4\">\n                                <h4 class=\"text-sm font-semibold text-blue-900 dark:text-blue-100 mb-2\">üí° Solutions:</h4>\n                                <ul class=\"text-xs text-blue-800 dark:text-blue-200 space-y-1\">\n                                    <li><strong>1. Use on Poe:</strong> Upload this app to Poe's Canvas for full AI functionality</li>\n                                    <li><strong>2. Local Server:</strong> Run <code class=\"bg-blue-100 dark:bg-blue-800 px-1 rounded\">python -m http.server 8000</code> and open <code class=\"bg-blue-100 dark:bg-blue-800 px-1 rounded\">localhost:8000</code></li>\n                                    <li><strong>3. Browser Extensions:</strong> Install a CORS-disabling extension (not recommended for regular browsing)</li>\n                                </ul>\n                            </div>\n                            \n                            <div class=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-3\">\n                                <p class=\"text-xs text-green-800 dark:text-green-200\">\n                                    <strong>‚úÖ All other features work perfectly:</strong> Create, edit, filter, search, export RAID items, view analytics, and more!\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class=\"flex justify-end mt-6\">\n                        <button class=\"px-4 py-2 bg-primary text-white rounded-lg font-medium hover:bg-primary/90 transition-colors\" onclick=\"document.body.removeChild(this.closest('.fixed'))\">\n                            Got it\n                        </button>\n                    </div>\n                </div>\n            `;\n            document.body.appendChild(modal);\n        }\n\n        // Generate Executive Summary\n        async function generateExecutiveSummary() {\n            if (raidItems.length === 0) {\n                showAlert('No RAID items available for summary generation');\n                return;\n            }\n\n            const currentApiKey = apiKeys[aiConfig.provider];\n            if (!currentApiKey || !currentApiKey.trim()) {\n                showAlert(`Please configure your ${aiConfig.provider} API key in Settings to use AI features.`);\n                return;\n            }\n\n            showLoadingModal('Generating Executive Summary...');\n            \n            try {\n                const summaryPrompt = `Generate a comprehensive executive summary report for these RAID (Risks, Assumptions, Issues, Dependencies) items. Focus on strategic insights and actionable recommendations for leadership.\n\nRAID Portfolio Data:\n${JSON.stringify(raidItems.map(item => ({\n    type: item.type,\n    title: item.title,\n    description: item.description,\n    priority: item.priority,\n    status: item.status,\n    impact: item.impact,\n    probability: item.probability,\n    workstream: item.workstream,\n    owner: item.owner,\n    dueDate: item.dueDate,\n    aiAnalysis: item.aiAnalysis\n})), null, 2)}\n\nPlease provide a structured executive summary covering:\n\n1. **Executive Overview** - High-level portfolio health and key concerns\n2. **Risk Assessment** - Critical risks requiring immediate attention\n3. **Priority Breakdown** - Distribution and focus areas by priority levels\n4. **Workstream Analysis** - Team/department exposure and workload\n5. **Timeline Concerns** - Overdue items and upcoming deadlines\n6. **Strategic Recommendations** - Concrete next steps for leadership\n7. **Resource Implications** - Staffing and budget considerations\n\nFormat the response in clear, professional language suitable for executive consumption. Use bullet points for key items and include specific metrics where relevant.`;\n\n                const summaryResponse = await callAI(summaryPrompt);\n                hideLoadingModal();\n                \n                if (summaryResponse && summaryResponse.trim()) {\n                    // Update usage stats\n                    aiConfig.usageStats.totalCalls++;\n                    aiConfig.usageStats.apiCalls++;\n                    saveData();\n                    \n                    showExecutiveSummaryModal(summaryResponse);\n                } else {\n                    throw new Error('AI returned empty response');\n                }\n                \n            } catch (error) {\n                hideLoadingModal();\n                console.error(\"Executive Summary failed:\", error);\n                \n                if (error.message === 'CORS_ERROR') {\n                    showCORSErrorModal();\n                } else {\n                    showAlert(`Executive summary failed: ${error.message}`);\n                }\n            }\n        }\n\n        function showExecutiveSummaryModal(summaryText) {\n            const modal = document.createElement('div');\n            modal.className = 'fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4';\n            modal.innerHTML = `\n                <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden flex flex-col\">\n                    <div class=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\n                        <div class=\"flex items-center space-x-3\">\n                            <div class=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                                <span class=\"text-white text-lg\">üìä</span>\n                            </div>\n                            <div>\n                                <h2 class=\"text-xl font-bold text-gray-900 dark:text-white\">AI Executive Summary</h2>\n                                <p class=\"text-sm text-gray-500 dark:text-gray-400\">Generated by ${aiConfig.model} ‚Ä¢ ${new Date().toLocaleDateString()}</p>\n                            </div>\n                        </div>\n                        <div class=\"flex items-center space-x-2\">\n                            <button id=\"copySummary\" class=\"px-3 py-2 text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\">\n                                üìã Copy\n                            </button>\n                            <button class=\"p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\" onclick=\"document.body.removeChild(this.closest('.fixed'))\">\n                                <span class=\"text-lg\">‚úï</span>\n                            </button>\n                        </div>\n                    </div>\n                    \n                    <div class=\"flex-1 overflow-y-auto p-6\">\n                        <div class=\"prose dark:prose-invert max-w-none\">\n                            <div id=\"summaryContent\" class=\"whitespace-pre-wrap text-sm leading-relaxed text-gray-700 dark:text-gray-300\">${summaryText}</div>\n                        </div>\n                    </div>\n                    \n                    <div class=\"flex justify-end p-6 border-t border-gray-200 dark:border-gray-700 space-x-3\">\n                        <button class=\"px-4 py-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors\" onclick=\"document.body.removeChild(this.closest('.fixed'))\">\n                            Close\n                        </button>\n                        <button id=\"exportSummary\" class=\"px-4 py-2 bg-primary text-white rounded-lg font-medium hover:bg-primary/90 transition-colors\">\n                            üì• Export as PDF\n                        </button>\n                    </div>\n                </div>\n            `;\n\n            // Add event listeners\n            modal.querySelector('#copySummary').addEventListener('click', () => {\n                navigator.clipboard.writeText(summaryText).then(() => {\n                    showToast('Summary copied to clipboard');\n                }).catch(() => {\n                    showToast('Failed to copy to clipboard');\n                });\n            });\n\n            modal.querySelector('#exportSummary').addEventListener('click', () => {\n                exportSummaryAsText(summaryText);\n            });\n\n            document.body.appendChild(modal);\n        }\n\n        function exportSummaryAsText(summaryText) {\n            const date = new Date().toISOString().split('T')[0];\n            const filename = `raid-executive-summary-${date}.txt`;\n            \n            const content = `RAID EXECUTIVE SUMMARY\nGenerated: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}\nAI Model: ${aiConfig.model}\nTotal Items: ${raidItems.length}\n\n${summaryText}\n\n---\nGenerated by RAIDMASTER AI Assistant\n`;\n\n            const blob = new Blob([content], { type: 'text/plain' });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = filename;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n            showToast('Executive summary exported successfully');\n        }\n\n        function exportData() {\n            const data = JSON.stringify(raidItems, null, 2);\n            const blob = new Blob([data], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `raid-data-${new Date().toISOString().split('T')[0]}.json`;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n            showToast('Data exported successfully');\n        }\n\n        function triggerRefresh() {\n            updateCounts();\n            renderRaidList();\n            showToast('Data refreshed');\n        }\n\n        // Settings functionality\n        function setupSettingsPanel() {\n            // AI Provider selection\n            const aiProviderSelect = document.getElementById('aiProviderSelect');\n            if (aiProviderSelect) {\n                aiProviderSelect.addEventListener('change', (e) => {\n                    aiConfig.provider = e.target.value;\n                    updateModelOptions();\n                    updateAPIKeyField();\n                    saveData();\n                    showToast(`AI provider changed to ${aiConfig.provider}`);\n                });\n            }\n\n            // AI Model selection\n            const aiModelSelect = document.getElementById('aiModelSelect');\n            if (aiModelSelect) {\n                aiModelSelect.addEventListener('change', (e) => {\n                    aiConfig.model = e.target.value;\n                    \n                    // Update all AI model displays\n                    const aiAnalysisBadge = document.getElementById('aiAnalysisModelBadge');\n                    if (aiAnalysisBadge) aiAnalysisBadge.textContent = aiConfig.model;\n                    \n                    const summaryAIModel = document.getElementById('summaryAIModel');\n                    if (summaryAIModel) summaryAIModel.textContent = aiConfig.model;\n                    \n                    saveData();\n                    showToast(`AI model changed to ${aiConfig.model}`);\n                });\n            }\n\n            // API Key input\n            const apiKeyField = document.getElementById('apiKeyField');\n            if (apiKeyField) {\n                apiKeyField.addEventListener('change', (e) => {\n                    apiKeys[aiConfig.provider] = e.target.value.trim();\n                    saveData();\n                    showToast('API key updated');\n                });\n            }\n\n            // Auto-apply toggle\n            const autoApplyToggle = document.getElementById('autoApplyToggle');\n            if (autoApplyToggle) {\n                autoApplyToggle.addEventListener('change', (e) => {\n                    aiConfig.autoApply = e.target.checked;\n                    saveData();\n                    showToast(`Auto-apply ${aiConfig.autoApply ? 'enabled' : 'disabled'}`);\n                });\n            }\n\n            // Confidence threshold\n            const confidenceSlider = document.getElementById('confidenceSlider');\n            if (confidenceSlider) {\n                confidenceSlider.addEventListener('input', (e) => {\n                    aiConfig.confidenceThreshold = parseFloat(e.target.value);\n                    const confidenceValue = document.getElementById('confidenceValue');\n                    if (confidenceValue) {\n                        confidenceValue.textContent = `${Math.round(aiConfig.confidenceThreshold * 100)}%`;\n                    }\n                    saveData();\n                });\n            }\n\n            // Reset stats\n            const resetStats = document.getElementById('resetStats');\n            if (resetStats) {\n                resetStats.addEventListener('click', () => {\n                    aiConfig.usageStats = {\n                        totalCalls: 0,\n                        apiCalls: 0,\n                        lastReset: new Date().toISOString()\n                    };\n                    saveData();\n                    updateUsageStatsDisplay();\n                    showToast('Usage statistics reset');\n                });\n            }\n        }\n\n        function updateModelOptions() {\n            const provider = aiProviders[aiConfig.provider];\n            const modelSelect = document.getElementById('aiModelSelect');\n            \n            if (provider && provider.models && modelSelect) {\n                modelSelect.innerHTML = provider.models.map(model => \n                    `<option value=\"${model}\" ${model === aiConfig.model ? 'selected' : ''}>${model}</option>`\n                ).join('');\n                \n                // Update model if current one is not available\n                if (!provider.models.includes(aiConfig.model)) {\n                    aiConfig.model = provider.models[0];\n                    modelSelect.value = aiConfig.model;\n                }\n            }\n        }\n\n        function updateAPIKeyField() {\n            const apiKeyField = document.getElementById('apiKeyField');\n            if (apiKeyField) {\n                apiKeyField.value = apiKeys[aiConfig.provider] || '';\n            }\n        }\n\n        function updateUsageStatsDisplay() {\n            const totalCallsEl = document.getElementById('totalCalls');\n            const apiCallsEl = document.getElementById('apiCalls');\n            const lastResetEl = document.getElementById('lastReset');\n            \n            if (totalCallsEl) totalCallsEl.textContent = aiConfig.usageStats.totalCalls;\n            if (apiCallsEl) apiCallsEl.textContent = aiConfig.usageStats.apiCalls || 0;\n            if (lastResetEl) lastResetEl.textContent = aiConfig.usageStats.lastReset ? \n                formatDate(aiConfig.usageStats.lastReset) : 'Never';\n        }\n\n        function updateSettingsDisplay() {\n            const aiProviderSelect = document.getElementById('aiProviderSelect');\n            if (aiProviderSelect) aiProviderSelect.value = aiConfig.provider;\n            \n            const aiModelSelect = document.getElementById('aiModelSelect');\n            if (aiModelSelect) aiModelSelect.value = aiConfig.model;\n            \n            const autoApplyToggle = document.getElementById('autoApplyToggle');\n            if (autoApplyToggle) autoApplyToggle.checked = aiConfig.autoApply;\n            \n            const confidenceSlider = document.getElementById('confidenceSlider');\n            if (confidenceSlider) confidenceSlider.value = aiConfig.confidenceThreshold;\n            \n            const confidenceValue = document.getElementById('confidenceValue');\n            if (confidenceValue) confidenceValue.textContent = `${Math.round(aiConfig.confidenceThreshold * 100)}%`;\n            \n            updateModelOptions();\n            updateAPIKeyField();\n            updateUsageStatsDisplay();\n        }\n\n        // Make functions globally available\n        window.openItemDetail = openItemDetail;\n        window.openCreateItemModal = openCreateItemModal;\n\n        // Initialize the application\n        document.addEventListener('DOMContentLoaded', function() {\n            try {\n                console.log('üìö RAIDMASTER script loaded successfully');\n                initApp();\n            } catch (error) {\n                console.error('Initialization failed:', error);\n                showAlert('App failed to initialize. Please refresh the page.');\n            }\n        });\n    </script>\n\n\n</body></html>";
export default htmlContent;